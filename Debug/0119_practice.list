
0119_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003d70  08003d70  00013d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d80  08003d80  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d80  08003d80  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d80  08003d80  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08003d98  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003d98  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c662  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca8  00000000  00000000  0002c6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5b1  00000000  00000000  0002fb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c828  00000000  00000000  0004f0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3212  00000000  00000000  0005b901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011eb13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033d8  00000000  00000000  0011eb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003d58 	.word	0x08003d58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003d58 	.word	0x08003d58

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fb07 	bl	8000fca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f809 	bl	80009d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 f922 	bl	8000c08 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009c4:	f000 f846 	bl	8000a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009c8:	f000 f89c 	bl	8000b04 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 80009cc:	f000 f939 	bl	8000c42 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <main+0x1c>

080009d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b094      	sub	sp, #80	; 0x50
 80009d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	2238      	movs	r2, #56	; 0x38
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 f9b1 	bl	8003d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009f8:	f000 fdea 	bl	80015d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0318 	add.w	r3, r7, #24
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fe80 	bl	8001718 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a1e:	f000 f90b 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a26:	2301      	movs	r3, #1
 8000a28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f97e 	bl	8001d3c <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a46:	f000 f8f7 	bl	8000c38 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3750      	adds	r7, #80	; 0x50
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
 8000a74:	615a      	str	r2, [r3, #20]
 8000a76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000a7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000a82:	2220      	movs	r2, #32
 8000a84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000a8e:	2263      	movs	r2, #99	; 0x63
 8000a90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a9e:	4818      	ldr	r0, [pc, #96]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000aa0:	f001 fb30 	bl	8002104 <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000aaa:	f000 f8c5 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000abe:	f003 f84b 	bl	8003b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ac8:	f000 f8b6 	bl	8000c38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8000ad0:	2319      	movs	r3, #25
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000ae4:	f002 f80c 	bl	8002b00 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000aee:	f000 f8a3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000af2:	4803      	ldr	r0, [pc, #12]	; (8000b00 <MX_TIM2_Init+0xac>)
 8000af4:	f000 f9c6 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000002c 	.word	0x2000002c

08000b04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b32:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b34:	4a33      	ldr	r2, [pc, #204]	; (8000c04 <MX_TIM3_Init+0x100>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000b38:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b44:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b58:	4829      	ldr	r0, [pc, #164]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b5a:	f001 fd8f 	bl	800267c <HAL_TIM_IC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000b64:	f000 f868 	bl	8000c38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b6c:	2350      	movs	r3, #80	; 0x50
 8000b6e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	481f      	ldr	r0, [pc, #124]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000b84:	f002 f8d0 	bl	8002d28 <HAL_TIM_SlaveConfigSynchro>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b8e:	f000 f853 	bl	8000c38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b96:	2301      	movs	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000bac:	f001 ff0c 	bl	80029c8 <HAL_TIM_IC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000bb6:	f000 f83f 	bl	8000c38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000bcc:	f001 fefc 	bl	80029c8 <HAL_TIM_IC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bd6:	f000 f82f 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_TIM3_Init+0xfc>)
 8000be8:	f002 ffb6 	bl	8003b58 <HAL_TIMEx_MasterConfigSynchronization>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000bf2:	f000 f821 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	3730      	adds	r7, #48	; 0x30
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000078 	.word	0x20000078
 8000c04:	40000400 	.word	0x40000400

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_GPIO_Init+0x2c>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <MX_GPIO_Init+0x2c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_GPIO_Init+0x2c>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>

08000c42 <main_function>:
 */
#include "mainpp.h"
#include "pwm.h"
#include "pwm2.h"

void main_function(){
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
	pwm_gnr();
 8000c46:	f000 f803 	bl	8000c50 <_Z7pwm_gnrv>
	setup();
 8000c4a:	f000 f80b 	bl	8000c64 <_Z5setupv>
	while(1){
 8000c4e:	e7fe      	b.n	8000c4e <main_function+0xc>

08000c50 <_Z7pwm_gnrv>:

#include "pwm.h"
#include "stm32g4xx_hal.h"
extern TIM_HandleTypeDef htim2;

void pwm_gnr(){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c54:	2100      	movs	r1, #0
 8000c56:	4802      	ldr	r0, [pc, #8]	; (8000c60 <_Z7pwm_gnrv+0x10>)
 8000c58:	f001 faac 	bl	80021b4 <HAL_TIM_PWM_Start>
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2000002c 	.word	0x2000002c

08000c64 <_Z5setupv>:
extern TIM_HandleTypeDef htim3;
int IC1, IC2;
double duty, f;
int PSC = 15;

void setup(){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <_Z5setupv+0x18>)
 8000c6c:	f001 fbae 	bl	80023cc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c70:	2104      	movs	r1, #4
 8000c72:	4802      	ldr	r0, [pc, #8]	; (8000c7c <_Z5setupv+0x18>)
 8000c74:	f001 fa9e 	bl	80021b4 <HAL_TIM_PWM_Start>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000078 	.word	0x20000078

08000c80 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if(htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7f1b      	ldrb	r3, [r3, #28]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d157      	bne.n	8000d40 <HAL_TIM_IC_CaptureCallback+0xc0>
		IC1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000c90:	2100      	movs	r1, #0
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000c94:	f002 f88a 	bl	8002dac <HAL_TIM_ReadCapturedValue>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000c9e:	601a      	str	r2, [r3, #0]
		if(IC1 != 0){
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d04b      	beq.n	8000d40 <HAL_TIM_IC_CaptureCallback+0xc0>
			IC2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4829      	ldr	r0, [pc, #164]	; (8000d50 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000cac:	f002 f87e 	bl	8002dac <HAL_TIM_ReadCapturedValue>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000cb6:	601a      	str	r2, [r3, #0]
			duty = (double)(IC2+1)/(IC1+1)*100;
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fbfc 	bl	80004bc <__aeabi_i2d>
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fbf4 	bl	80004bc <__aeabi_i2d>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	f7ff fd82 	bl	80007e4 <__aeabi_ddiv>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f04f 0200 	mov.w	r2, #0
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000cee:	f7ff fc4f 	bl	8000590 <__aeabi_dmul>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	491a      	ldr	r1, [pc, #104]	; (8000d60 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000cf8:	e9c1 2300 	strd	r2, r3, [r1]
			f = (double)16000000/(PSC+1)/(IC1+1);
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fbda 	bl	80004bc <__aeabi_i2d>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	a10e      	add	r1, pc, #56	; (adr r1, 8000d48 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d12:	f7ff fd67 	bl	80007e4 <__aeabi_ddiv>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	4614      	mov	r4, r2
 8000d1c:	461d      	mov	r5, r3
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fbc9 	bl	80004bc <__aeabi_i2d>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	4620      	mov	r0, r4
 8000d30:	4629      	mov	r1, r5
 8000d32:	f7ff fd57 	bl	80007e4 <__aeabi_ddiv>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	490b      	ldr	r1, [pc, #44]	; (8000d68 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d3c:	e9c1 2300 	strd	r2, r3, [r1]
		}
	}
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bdb0      	pop	{r4, r5, r7, pc}
 8000d48:	00000000 	.word	0x00000000
 8000d4c:	416e8480 	.word	0x416e8480
 8000d50:	20000078 	.word	0x20000078
 8000d54:	200000c4 	.word	0x200000c4
 8000d58:	200000c8 	.word	0x200000c8
 8000d5c:	40590000 	.word	0x40590000
 8000d60:	200000d0 	.word	0x200000d0
 8000d64:	20000000 	.word	0x20000000
 8000d68:	200000d8 	.word	0x200000d8

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x44>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x44>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x44>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x44>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d10b      	bne.n	8000dde <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_TIM_PWM_MspInit+0x38>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_TIM_PWM_MspInit+0x38>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_TIM_PWM_MspInit+0x38>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_TIM_IC_MspInit+0x8c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d130      	bne.n	8000e74 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_TIM_IC_MspInit+0x90>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	4a1a      	ldr	r2, [pc, #104]	; (8000e80 <HAL_TIM_IC_MspInit+0x90>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_TIM_IC_MspInit+0x90>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_TIM_IC_MspInit+0x90>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <HAL_TIM_IC_MspInit+0x90>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_TIM_IC_MspInit+0x90>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e42:	2340      	movs	r3, #64	; 0x40
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e52:	2302      	movs	r3, #2
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e60:	f000 fa34 	bl	80012cc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2100      	movs	r1, #0
 8000e68:	201d      	movs	r0, #29
 8000e6a:	f000 f9fa 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e6e:	201d      	movs	r0, #29
 8000e70:	f000 fa11 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d11c      	bne.n	8000ee0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_TIM_MspPostInit+0x64>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_TIM_MspPostInit+0x64>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_TIM_MspPostInit+0x64>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f000 f9f6 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 f89a 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM3_IRQHandler+0x10>)
 8000f46:	f001 fbf0 	bl	800272a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000078 	.word	0x20000078

08000f54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	; (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 feab 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fd03 	bl	80009b4 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   r0, =_estack
 8000fb0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fbc:	08003d88 	.word	0x08003d88
  ldr r2, =_sbss
 8000fc0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fc4:	200000e4 	.word	0x200000e4

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>

08000fca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f939 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f80e 	bl	8000ffc <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	e001      	b.n	8000ff0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fec:	f7ff febe 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_InitTick+0x68>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d022      	beq.n	8001056 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x6c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_InitTick+0x68>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800101c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001020:	fbb2 f3f3 	udiv	r3, r2, r3
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f944 	bl	80012b2 <HAL_SYSTICK_Config>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10f      	bne.n	8001050 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d809      	bhi.n	800104a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001036:	2200      	movs	r2, #0
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	f04f 30ff 	mov.w	r0, #4294967295
 800103e:	f000 f910 	bl	8001262 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_InitTick+0x70>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	e007      	b.n	800105a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	e004      	b.n	800105a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e001      	b.n	800105a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000004 	.word	0x20000004
 800106c:	20000008 	.word	0x20000008

08001070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x1c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_IncTick+0x20>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4413      	add	r3, r2
 800107e:	4a03      	ldr	r2, [pc, #12]	; (800108c <HAL_IncTick+0x1c>)
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200000e0 	.word	0x200000e0
 8001090:	2000000c 	.word	0x2000000c

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200000e0 	.word	0x200000e0

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <__NVIC_EnableIRQ+0x38>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff8e 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff29 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff40 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff90 	bl	80011a0 <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5f 	bl	800114c <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff33 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa4 	bl	8001208 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012da:	e15a      	b.n	8001592 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 814c 	beq.w	800158c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001308:	2b02      	cmp	r3, #2
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 0201 	and.w	r2, r3, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	6939      	ldr	r1, [r7, #16]
 80013fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80a6 	beq.w	800158c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <HAL_GPIO_Init+0x2e4>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001444:	4a5a      	ldr	r2, [pc, #360]	; (80015b0 <HAL_GPIO_Init+0x2e4>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6613      	str	r3, [r2, #96]	; 0x60
 800144c:	4b58      	ldr	r3, [pc, #352]	; (80015b0 <HAL_GPIO_Init+0x2e4>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001458:	4a56      	ldr	r2, [pc, #344]	; (80015b4 <HAL_GPIO_Init+0x2e8>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001482:	d01f      	beq.n	80014c4 <HAL_GPIO_Init+0x1f8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x2ec>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d019      	beq.n	80014c0 <HAL_GPIO_Init+0x1f4>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x2f0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1f0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4a      	ldr	r2, [pc, #296]	; (80015c0 <HAL_GPIO_Init+0x2f4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1ec>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a49      	ldr	r2, [pc, #292]	; (80015c4 <HAL_GPIO_Init+0x2f8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1e8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <HAL_GPIO_Init+0x2fc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1e4>
 80014ac:	2305      	movs	r3, #5
 80014ae:	e00a      	b.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014b0:	2306      	movs	r3, #6
 80014b2:	e008      	b.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e006      	b.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014b8:	2303      	movs	r3, #3
 80014ba:	e004      	b.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014bc:	2302      	movs	r3, #2
 80014be:	e002      	b.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_GPIO_Init+0x1fa>
 80014c4:	2300      	movs	r3, #0
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	f002 0203 	and.w	r2, r2, #3
 80014cc:	0092      	lsls	r2, r2, #2
 80014ce:	4093      	lsls	r3, r2
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d6:	4937      	ldr	r1, [pc, #220]	; (80015b4 <HAL_GPIO_Init+0x2e8>)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014e4:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_GPIO_Init+0x300>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001508:	4a30      	ldr	r2, [pc, #192]	; (80015cc <HAL_GPIO_Init+0x300>)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_GPIO_Init+0x300>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800155c:	4a1b      	ldr	r2, [pc, #108]	; (80015cc <HAL_GPIO_Init+0x300>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <HAL_GPIO_Init+0x300>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f ae9d 	bne.w	80012dc <HAL_GPIO_Init+0x10>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	371c      	adds	r7, #28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000c00 	.word	0x48000c00
 80015c4:	48001000 	.word	0x48001000
 80015c8:	48001400 	.word	0x48001400
 80015cc:	40010400 	.word	0x40010400

080015d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d141      	bne.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ea:	d131      	bne.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015ec:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015f2:	4a46      	ldr	r2, [pc, #280]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001604:	4a41      	ldr	r2, [pc, #260]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800160c:	4b40      	ldr	r3, [pc, #256]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2232      	movs	r2, #50	; 0x32
 8001612:	fb02 f303 	mul.w	r3, r2, r3
 8001616:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001618:	fba2 2303 	umull	r2, r3, r2, r3
 800161c:	0c9b      	lsrs	r3, r3, #18
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001622:	e002      	b.n	800162a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3b01      	subs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001636:	d102      	bne.n	800163e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f2      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800164a:	d158      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e057      	b.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001656:	4a2d      	ldr	r2, [pc, #180]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800165c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001660:	e04d      	b.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001668:	d141      	bne.n	80016ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001676:	d131      	bne.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001690:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001696:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2232      	movs	r2, #50	; 0x32
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	0c9b      	lsrs	r3, r3, #18
 80016aa:	3301      	adds	r3, #1
 80016ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ae:	e002      	b.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c2:	d102      	bne.n	80016ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f2      	bne.n	80016b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d6:	d112      	bne.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e011      	b.n	8001700 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016ec:	e007      	b.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ee:	4b07      	ldr	r3, [pc, #28]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40007000 	.word	0x40007000
 8001710:	20000004 	.word	0x20000004
 8001714:	431bde83 	.word	0x431bde83

08001718 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e2fe      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d075      	beq.n	8001822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001736:	4b97      	ldr	r3, [pc, #604]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001740:	4b94      	ldr	r3, [pc, #592]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d102      	bne.n	8001756 <HAL_RCC_OscConfig+0x3e>
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d002      	beq.n	800175c <HAL_RCC_OscConfig+0x44>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b08      	cmp	r3, #8
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b8d      	ldr	r3, [pc, #564]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05b      	beq.n	8001820 <HAL_RCC_OscConfig+0x108>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d157      	bne.n	8001820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e2d9      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x74>
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a84      	ldr	r2, [pc, #528]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b7f      	ldr	r3, [pc, #508]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a7e      	ldr	r2, [pc, #504]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b7c      	ldr	r3, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7b      	ldr	r2, [pc, #492]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 80017b0:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a77      	ldr	r2, [pc, #476]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b75      	ldr	r3, [pc, #468]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a74      	ldr	r2, [pc, #464]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc60 	bl	8001094 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc5c 	bl	8001094 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e29e      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ea:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc4c 	bl	8001094 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fc48 	bl	8001094 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e28a      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001812:	4b60      	ldr	r3, [pc, #384]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0xe8>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d075      	beq.n	800191a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0x136>
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d002      	beq.n	8001854 <HAL_RCC_OscConfig+0x13c>
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d11f      	bne.n	8001894 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x154>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e25d      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	061b      	lsls	r3, r3, #24
 800187a:	4946      	ldr	r1, [pc, #280]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001880:	4b45      	ldr	r3, [pc, #276]	; (8001998 <HAL_RCC_OscConfig+0x280>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fbb9 	bl	8000ffc <HAL_InitTick>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d043      	beq.n	8001918 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e249      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d023      	beq.n	80018e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189c:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a3c      	ldr	r2, [pc, #240]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fbf4 	bl	8001094 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fbf0 	bl	8001094 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e232      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	492d      	ldr	r1, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
 80018e2:	e01a      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fbd0 	bl	8001094 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff fbcc 	bl	8001094 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e20e      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1e0>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d041      	beq.n	80019aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01c      	beq.n	8001968 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193e:	f7ff fba9 	bl	8001094 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fba5 	bl	8001094 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1e7      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ef      	beq.n	8001946 <HAL_RCC_OscConfig+0x22e>
 8001966:	e020      	b.n	80019aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 800196a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <HAL_RCC_OscConfig+0x27c>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff fb8c 	bl	8001094 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197e:	e00d      	b.n	800199c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff fb88 	bl	8001094 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d906      	bls.n	800199c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1ca      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000
 8001998:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800199c:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ea      	bne.n	8001980 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80a6 	beq.w	8001b04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019bc:	4b84      	ldr	r3, [pc, #528]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_OscConfig+0x2b4>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x2b6>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00d      	beq.n	80019ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	4a7e      	ldr	r2, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6593      	str	r3, [r2, #88]	; 0x58
 80019de:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ee:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <HAL_RCC_OscConfig+0x4bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019fa:	4b76      	ldr	r3, [pc, #472]	; (8001bd4 <HAL_RCC_OscConfig+0x4bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a75      	ldr	r2, [pc, #468]	; (8001bd4 <HAL_RCC_OscConfig+0x4bc>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb45 	bl	8001094 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff fb41 	bl	8001094 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e183      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <HAL_RCC_OscConfig+0x4bc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d108      	bne.n	8001a46 <HAL_RCC_OscConfig+0x32e>
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3a:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a44:	e024      	b.n	8001a90 <HAL_RCC_OscConfig+0x378>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d110      	bne.n	8001a70 <HAL_RCC_OscConfig+0x358>
 8001a4e:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a54:	4a5e      	ldr	r2, [pc, #376]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5e:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x378>
 8001a70:	4b57      	ldr	r3, [pc, #348]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a86:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d016      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fafc 	bl	8001094 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff faf8 	bl	8001094 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e138      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ed      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x388>
 8001ac4:	e015      	b.n	8001af2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fae5 	bl	8001094 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fae1 	bl	8001094 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e121      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1ed      	bne.n	8001ace <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	4b35      	ldr	r3, [pc, #212]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	4a34      	ldr	r2, [pc, #208]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b02:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d03c      	beq.n	8001b8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d01c      	beq.n	8001b52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1e:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b28:	f7ff fab4 	bl	8001094 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b30:	f7ff fab0 	bl	8001094 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0f2      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ef      	beq.n	8001b30 <HAL_RCC_OscConfig+0x418>
 8001b50:	e01b      	b.n	8001b8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa97 	bl	8001094 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6a:	f7ff fa93 	bl	8001094 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0d5      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80c9 	beq.w	8001d26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	f000 8083 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d15e      	bne.n	8001c68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_RCC_OscConfig+0x4b8>)
 8001bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fa6d 	bl	8001094 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	e00c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff fa69 	bl	8001094 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d905      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0ab      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ec      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b52      	ldr	r3, [pc, #328]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	4b52      	ldr	r3, [pc, #328]	; (8001d34 <HAL_RCC_OscConfig+0x61c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6a11      	ldr	r1, [r2, #32]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bfe:	0212      	lsls	r2, r2, #8
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c06:	0852      	lsrs	r2, r2, #1
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	0552      	lsls	r2, r2, #21
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c12:	0852      	lsrs	r2, r2, #1
 8001c14:	3a01      	subs	r2, #1
 8001c16:	0652      	lsls	r2, r2, #25
 8001c18:	4311      	orrs	r1, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c1e:	06d2      	lsls	r2, r2, #27
 8001c20:	430a      	orrs	r2, r1
 8001c22:	4943      	ldr	r1, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a40      	ldr	r2, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c34:	4b3e      	ldr	r3, [pc, #248]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa28 	bl	8001094 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa24 	bl	8001094 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e066      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	4b35      	ldr	r3, [pc, #212]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x530>
 8001c66:	e05e      	b.n	8001d26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fa0e 	bl	8001094 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff fa0a 	bl	8001094 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e04c      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c9a:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4924      	ldr	r1, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_OscConfig+0x620>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60cb      	str	r3, [r1, #12]
 8001ca6:	e03e      	b.n	8001d26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e039      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_OscConfig+0x618>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0203 	and.w	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d12c      	bne.n	8001d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d123      	bne.n	8001d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d11b      	bne.n	8001d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d113      	bne.n	8001d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d109      	bne.n	8001d22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d18:	085b      	lsrs	r3, r3, #1
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	019f800c 	.word	0x019f800c
 8001d38:	feeefffc 	.word	0xfeeefffc

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e11e      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b91      	ldr	r3, [pc, #580]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 020f 	bic.w	r2, r3, #15
 8001d6a:	498c      	ldr	r1, [pc, #560]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b8a      	ldr	r3, [pc, #552]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e106      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d073      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d129      	bne.n	8001dec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d98:	4b81      	ldr	r3, [pc, #516]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0f4      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001da8:	f000 f966 	bl	8002078 <RCC_GetSysClockFreqFromPLLSource>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4a7c      	ldr	r2, [pc, #496]	; (8001fa4 <HAL_RCC_ClockConfig+0x268>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d93f      	bls.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001db6:	4b7a      	ldr	r3, [pc, #488]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d033      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d12f      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	e024      	b.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0c6      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	4b66      	ldr	r3, [pc, #408]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0be      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e14:	f000 f8ce 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a61      	ldr	r2, [pc, #388]	; (8001fa4 <HAL_RCC_ClockConfig+0x268>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d909      	bls.n	8001e36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e2a:	4a5d      	ldr	r2, [pc, #372]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4957      	ldr	r1, [pc, #348]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e48:	f7ff f924 	bl	8001094 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff f920 	bl	8001094 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e095      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d023      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001e96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001eb0:	4a3b      	ldr	r2, [pc, #236]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4936      	ldr	r1, [pc, #216]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
 8001eca:	e008      	b.n	8001ede <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b80      	cmp	r3, #128	; 0x80
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001ed8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001edc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d21d      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 020f 	bic.w	r2, r3, #15
 8001ef4:	4929      	ldr	r1, [pc, #164]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001efc:	f7ff f8ca 	bl	8001094 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7ff f8c6 	bl	8001094 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e03b      	b.n	8001f92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_RCC_ClockConfig+0x260>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1ed      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4917      	ldr	r1, [pc, #92]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490f      	ldr	r1, [pc, #60]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f66:	f000 f825 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <HAL_RCC_ClockConfig+0x26c>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x270>)
 8001f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_ClockConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff f836 	bl	8000ffc <HAL_InitTick>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	04c4b400 	.word	0x04c4b400
 8001fa8:	08003d70 	.word	0x08003d70
 8001fac:	20000004 	.word	0x20000004
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d102      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e047      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e03e      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b0c      	cmp	r3, #12
 8001fe8:	d136      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3301      	adds	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002008:	4a1a      	ldr	r2, [pc, #104]	; (8002074 <HAL_RCC_GetSysClockFreq+0xc0>)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002012:	68d2      	ldr	r2, [r2, #12]
 8002014:	0a12      	lsrs	r2, r2, #8
 8002016:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
      break;
 8002020:	e00c      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002022:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 800202c:	68d2      	ldr	r2, [r2, #12]
 800202e:	0a12      	lsrs	r2, r2, #8
 8002030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	617b      	str	r3, [r7, #20]
      break;
 800203a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0e5b      	lsrs	r3, r3, #25
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	fbb2 f3f3 	udiv	r3, r2, r3
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	e001      	b.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	4618      	mov	r0, r3
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	00f42400 	.word	0x00f42400
 8002074:	007a1200 	.word	0x007a1200

08002078 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d10c      	bne.n	80020b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800209c:	4a17      	ldr	r2, [pc, #92]	; (80020fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020a6:	68d2      	ldr	r2, [r2, #12]
 80020a8:	0a12      	lsrs	r2, r2, #8
 80020aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
    break;
 80020b4:	e00c      	b.n	80020d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020c0:	68d2      	ldr	r2, [r2, #12]
 80020c2:	0a12      	lsrs	r2, r2, #8
 80020c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	617b      	str	r3, [r7, #20]
    break;
 80020ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0e5b      	lsrs	r3, r3, #25
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80020ea:	687b      	ldr	r3, [r7, #4]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	007a1200 	.word	0x007a1200
 8002100:	00f42400 	.word	0x00f42400

08002104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e049      	b.n	80021aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fe42 	bl	8000db4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f000 fe9e 	bl	8002e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_TIM_PWM_Start+0x24>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	e03c      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d109      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x3e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	e02f      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d109      	bne.n	800220c <HAL_TIM_PWM_Start+0x58>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e022      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d109      	bne.n	8002226 <HAL_TIM_PWM_Start+0x72>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	e015      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b10      	cmp	r3, #16
 800222a:	d109      	bne.n	8002240 <HAL_TIM_PWM_Start+0x8c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	bf14      	ite	ne
 8002238:	2301      	movne	r3, #1
 800223a:	2300      	moveq	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e008      	b.n	8002252 <HAL_TIM_PWM_Start+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e0a1      	b.n	800239e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_TIM_PWM_Start+0xb6>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002268:	e023      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d104      	bne.n	800227a <HAL_TIM_PWM_Start+0xc6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002278:	e01b      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d104      	bne.n	800228a <HAL_TIM_PWM_Start+0xd6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002288:	e013      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d104      	bne.n	800229a <HAL_TIM_PWM_Start+0xe6>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002298:	e00b      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d104      	bne.n	80022aa <HAL_TIM_PWM_Start+0xf6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a8:	e003      	b.n	80022b2 <HAL_TIM_PWM_Start+0xfe>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2202      	movs	r2, #2
 80022ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2201      	movs	r2, #1
 80022b8:	6839      	ldr	r1, [r7, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fc27 	bl	8003b0e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_TIM_PWM_Start+0x1f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d018      	beq.n	80022fc <HAL_TIM_PWM_Start+0x148>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a37      	ldr	r2, [pc, #220]	; (80023ac <HAL_TIM_PWM_Start+0x1f8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d013      	beq.n	80022fc <HAL_TIM_PWM_Start+0x148>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a35      	ldr	r2, [pc, #212]	; (80023b0 <HAL_TIM_PWM_Start+0x1fc>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00e      	beq.n	80022fc <HAL_TIM_PWM_Start+0x148>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a34      	ldr	r2, [pc, #208]	; (80023b4 <HAL_TIM_PWM_Start+0x200>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d009      	beq.n	80022fc <HAL_TIM_PWM_Start+0x148>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a32      	ldr	r2, [pc, #200]	; (80023b8 <HAL_TIM_PWM_Start+0x204>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_TIM_PWM_Start+0x148>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a31      	ldr	r2, [pc, #196]	; (80023bc <HAL_TIM_PWM_Start+0x208>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_TIM_PWM_Start+0x14c>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_TIM_PWM_Start+0x14e>
 8002300:	2300      	movs	r3, #0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_TIM_PWM_Start+0x1f4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d01d      	beq.n	800235c <HAL_TIM_PWM_Start+0x1a8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d018      	beq.n	800235c <HAL_TIM_PWM_Start+0x1a8>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_TIM_PWM_Start+0x20c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_TIM_PWM_Start+0x1a8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <HAL_TIM_PWM_Start+0x210>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00e      	beq.n	800235c <HAL_TIM_PWM_Start+0x1a8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1a      	ldr	r2, [pc, #104]	; (80023ac <HAL_TIM_PWM_Start+0x1f8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d009      	beq.n	800235c <HAL_TIM_PWM_Start+0x1a8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_TIM_PWM_Start+0x1fc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <HAL_TIM_PWM_Start+0x1a8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_TIM_PWM_Start+0x208>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d115      	bne.n	8002388 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_TIM_PWM_Start+0x214>)
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b06      	cmp	r3, #6
 800236c:	d015      	beq.n	800239a <HAL_TIM_PWM_Start+0x1e6>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002374:	d011      	beq.n	800239a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002386:	e008      	b.n	800239a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e000      	b.n	800239c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40013400 	.word	0x40013400
 80023b0:	40014000 	.word	0x40014000
 80023b4:	40014400 	.word	0x40014400
 80023b8:	40014800 	.word	0x40014800
 80023bc:	40015000 	.word	0x40015000
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800
 80023c8:	00010007 	.word	0x00010007

080023cc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_TIM_PWM_Start_IT+0x28>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e03c      	b.n	800246e <HAL_TIM_PWM_Start_IT+0xa2>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d109      	bne.n	800240e <HAL_TIM_PWM_Start_IT+0x42>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	bf14      	ite	ne
 8002406:	2301      	movne	r3, #1
 8002408:	2300      	moveq	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e02f      	b.n	800246e <HAL_TIM_PWM_Start_IT+0xa2>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d109      	bne.n	8002428 <HAL_TIM_PWM_Start_IT+0x5c>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e022      	b.n	800246e <HAL_TIM_PWM_Start_IT+0xa2>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d109      	bne.n	8002442 <HAL_TIM_PWM_Start_IT+0x76>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	bf14      	ite	ne
 800243a:	2301      	movne	r3, #1
 800243c:	2300      	moveq	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e015      	b.n	800246e <HAL_TIM_PWM_Start_IT+0xa2>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b10      	cmp	r3, #16
 8002446:	d109      	bne.n	800245c <HAL_TIM_PWM_Start_IT+0x90>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b01      	cmp	r3, #1
 8002452:	bf14      	ite	ne
 8002454:	2301      	movne	r3, #1
 8002456:	2300      	moveq	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e008      	b.n	800246e <HAL_TIM_PWM_Start_IT+0xa2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0ec      	b.n	8002650 <HAL_TIM_PWM_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <HAL_TIM_PWM_Start_IT+0xba>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002484:	e023      	b.n	80024ce <HAL_TIM_PWM_Start_IT+0x102>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d104      	bne.n	8002496 <HAL_TIM_PWM_Start_IT+0xca>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	e01b      	b.n	80024ce <HAL_TIM_PWM_Start_IT+0x102>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d104      	bne.n	80024a6 <HAL_TIM_PWM_Start_IT+0xda>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024a4:	e013      	b.n	80024ce <HAL_TIM_PWM_Start_IT+0x102>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d104      	bne.n	80024b6 <HAL_TIM_PWM_Start_IT+0xea>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024b4:	e00b      	b.n	80024ce <HAL_TIM_PWM_Start_IT+0x102>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d104      	bne.n	80024c6 <HAL_TIM_PWM_Start_IT+0xfa>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c4:	e003      	b.n	80024ce <HAL_TIM_PWM_Start_IT+0x102>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b0c      	cmp	r3, #12
 80024d2:	d841      	bhi.n	8002558 <HAL_TIM_PWM_Start_IT+0x18c>
 80024d4:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_TIM_PWM_Start_IT+0x110>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	08002511 	.word	0x08002511
 80024e0:	08002559 	.word	0x08002559
 80024e4:	08002559 	.word	0x08002559
 80024e8:	08002559 	.word	0x08002559
 80024ec:	08002523 	.word	0x08002523
 80024f0:	08002559 	.word	0x08002559
 80024f4:	08002559 	.word	0x08002559
 80024f8:	08002559 	.word	0x08002559
 80024fc:	08002535 	.word	0x08002535
 8002500:	08002559 	.word	0x08002559
 8002504:	08002559 	.word	0x08002559
 8002508:	08002559 	.word	0x08002559
 800250c:	08002547 	.word	0x08002547
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0202 	orr.w	r2, r2, #2
 800251e:	60da      	str	r2, [r3, #12]
      break;
 8002520:	e01d      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0204 	orr.w	r2, r2, #4
 8002530:	60da      	str	r2, [r3, #12]
      break;
 8002532:	e014      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0208 	orr.w	r2, r2, #8
 8002542:	60da      	str	r2, [r3, #12]
      break;
 8002544:	e00b      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0210 	orr.w	r2, r2, #16
 8002554:	60da      	str	r2, [r3, #12]
      break;
 8002556:	e002      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
      break;
 800255c:	bf00      	nop
  }

  if (status == HAL_OK)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d174      	bne.n	800264e <HAL_TIM_PWM_Start_IT+0x282>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2201      	movs	r2, #1
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f001 face 	bl	8003b0e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_TIM_PWM_Start_IT+0x28c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d018      	beq.n	80025ae <HAL_TIM_PWM_Start_IT+0x1e2>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a36      	ldr	r2, [pc, #216]	; (800265c <HAL_TIM_PWM_Start_IT+0x290>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d013      	beq.n	80025ae <HAL_TIM_PWM_Start_IT+0x1e2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a35      	ldr	r2, [pc, #212]	; (8002660 <HAL_TIM_PWM_Start_IT+0x294>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00e      	beq.n	80025ae <HAL_TIM_PWM_Start_IT+0x1e2>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a33      	ldr	r2, [pc, #204]	; (8002664 <HAL_TIM_PWM_Start_IT+0x298>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d009      	beq.n	80025ae <HAL_TIM_PWM_Start_IT+0x1e2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a32      	ldr	r2, [pc, #200]	; (8002668 <HAL_TIM_PWM_Start_IT+0x29c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_TIM_PWM_Start_IT+0x1e2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a30      	ldr	r2, [pc, #192]	; (800266c <HAL_TIM_PWM_Start_IT+0x2a0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_TIM_PWM_Start_IT+0x1e6>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_TIM_PWM_Start_IT+0x1e8>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a22      	ldr	r2, [pc, #136]	; (8002658 <HAL_TIM_PWM_Start_IT+0x28c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01d      	beq.n	800260e <HAL_TIM_PWM_Start_IT+0x242>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d018      	beq.n	800260e <HAL_TIM_PWM_Start_IT+0x242>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_TIM_PWM_Start_IT+0x2a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d013      	beq.n	800260e <HAL_TIM_PWM_Start_IT+0x242>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_TIM_PWM_Start_IT+0x2a8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d00e      	beq.n	800260e <HAL_TIM_PWM_Start_IT+0x242>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_TIM_PWM_Start_IT+0x290>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <HAL_TIM_PWM_Start_IT+0x242>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_TIM_PWM_Start_IT+0x294>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <HAL_TIM_PWM_Start_IT+0x242>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d115      	bne.n	800263a <HAL_TIM_PWM_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8002616:	4013      	ands	r3, r2
 8002618:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b06      	cmp	r3, #6
 800261e:	d015      	beq.n	800264c <HAL_TIM_PWM_Start_IT+0x280>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d011      	beq.n	800264c <HAL_TIM_PWM_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	e008      	b.n	800264c <HAL_TIM_PWM_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e000      	b.n	800264e <HAL_TIM_PWM_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40013400 	.word	0x40013400
 8002660:	40014000 	.word	0x40014000
 8002664:	40014400 	.word	0x40014400
 8002668:	40014800 	.word	0x40014800
 800266c:	40015000 	.word	0x40015000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	00010007 	.word	0x00010007

0800267c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e049      	b.n	8002722 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe fba4 	bl	8000df0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fbe2 	bl	8002e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01b      	beq.n	800278e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0202 	mvn.w	r2, #2
 800275e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe fa83 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 800277a:	e005      	b.n	8002788 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fb63 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fb6a 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01b      	beq.n	80027da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0204 	mvn.w	r2, #4
 80027aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe fa5d 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 80027c6:	e005      	b.n	80027d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 fb3d 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fb44 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01b      	beq.n	8002826 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f06f 0208 	mvn.w	r2, #8
 80027f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe fa37 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 8002812:	e005      	b.n	8002820 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb17 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fb1e 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b00      	cmp	r3, #0
 800282e:	d020      	beq.n	8002872 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01b      	beq.n	8002872 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f06f 0210 	mvn.w	r2, #16
 8002842:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2208      	movs	r2, #8
 8002848:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7fe fa11 	bl	8000c80 <HAL_TIM_IC_CaptureCallback>
 800285e:	e005      	b.n	800286c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 faf1 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 faf8 	bl	8002e5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00c      	beq.n	8002896 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f06f 0201 	mvn.w	r2, #1
 800288e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 facf 	bl	8002e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f001 f9e2 	bl	8003c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f001 f9da 	bl	8003c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fab2 	bl	8002e70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0220 	mvn.w	r2, #32
 8002928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 f9a2 	bl	8003c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f001 f9ae 	bl	8003cb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f001 f9a6 	bl	8003cc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f001 f99e 	bl	8003cd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f001 f996 	bl	8003cec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e088      	b.n	8002af8 <HAL_TIM_IC_ConfigChannel+0x130>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	6819      	ldr	r1, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f000 fee0 	bl	80037c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020c 	bic.w	r2, r2, #12
 8002a16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6999      	ldr	r1, [r3, #24]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	619a      	str	r2, [r3, #24]
 8002a2a:	e060      	b.n	8002aee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d11c      	bne.n	8002a6c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f000 ff5e 	bl	8003902 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6999      	ldr	r1, [r3, #24]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	021a      	lsls	r2, r3, #8
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	619a      	str	r2, [r3, #24]
 8002a6a:	e040      	b.n	8002aee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d11b      	bne.n	8002aaa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	6819      	ldr	r1, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f000 ffab 	bl	80039dc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 020c 	bic.w	r2, r2, #12
 8002a94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69d9      	ldr	r1, [r3, #28]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	61da      	str	r2, [r3, #28]
 8002aa8:	e021      	b.n	8002aee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0c      	cmp	r3, #12
 8002aae:	d11c      	bne.n	8002aea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	6819      	ldr	r1, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f000 ffc8 	bl	8003a54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002ad2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69d9      	ldr	r1, [r3, #28]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	021a      	lsls	r2, r3, #8
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	61da      	str	r2, [r3, #28]
 8002ae8:	e001      	b.n	8002aee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e0ff      	b.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b14      	cmp	r3, #20
 8002b2a:	f200 80f0 	bhi.w	8002d0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b89 	.word	0x08002b89
 8002b38:	08002d0f 	.word	0x08002d0f
 8002b3c:	08002d0f 	.word	0x08002d0f
 8002b40:	08002d0f 	.word	0x08002d0f
 8002b44:	08002bc9 	.word	0x08002bc9
 8002b48:	08002d0f 	.word	0x08002d0f
 8002b4c:	08002d0f 	.word	0x08002d0f
 8002b50:	08002d0f 	.word	0x08002d0f
 8002b54:	08002c0b 	.word	0x08002c0b
 8002b58:	08002d0f 	.word	0x08002d0f
 8002b5c:	08002d0f 	.word	0x08002d0f
 8002b60:	08002d0f 	.word	0x08002d0f
 8002b64:	08002c4b 	.word	0x08002c4b
 8002b68:	08002d0f 	.word	0x08002d0f
 8002b6c:	08002d0f 	.word	0x08002d0f
 8002b70:	08002d0f 	.word	0x08002d0f
 8002b74:	08002c8d 	.word	0x08002c8d
 8002b78:	08002d0f 	.word	0x08002d0f
 8002b7c:	08002d0f 	.word	0x08002d0f
 8002b80:	08002d0f 	.word	0x08002d0f
 8002b84:	08002ccd 	.word	0x08002ccd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fa22 	bl	8002fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0208 	orr.w	r2, r2, #8
 8002ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0204 	bic.w	r2, r2, #4
 8002bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6999      	ldr	r1, [r3, #24]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	619a      	str	r2, [r3, #24]
      break;
 8002bc6:	e0a5      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fa9c 	bl	800310c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6999      	ldr	r1, [r3, #24]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	619a      	str	r2, [r3, #24]
      break;
 8002c08:	e084      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fb0f 	bl	8003234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0208 	orr.w	r2, r2, #8
 8002c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0204 	bic.w	r2, r2, #4
 8002c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69d9      	ldr	r1, [r3, #28]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	691a      	ldr	r2, [r3, #16]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	61da      	str	r2, [r3, #28]
      break;
 8002c48:	e064      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fb81 	bl	8003358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69da      	ldr	r2, [r3, #28]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69d9      	ldr	r1, [r3, #28]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	021a      	lsls	r2, r3, #8
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	61da      	str	r2, [r3, #28]
      break;
 8002c8a:	e043      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fbf4 	bl	8003480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0208 	orr.w	r2, r2, #8
 8002ca6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0204 	bic.w	r2, r2, #4
 8002cb6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002cca:	e023      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fc3e 	bl	8003554 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	021a      	lsls	r2, r3, #8
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002d0c:	e002      	b.n	8002d14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	75fb      	strb	r3, [r7, #23]
      break;
 8002d12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop

08002d28 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e031      	b.n	8002da4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fc6a 	bl	800362c <TIM_SlaveTimer_SetConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e018      	b.n	8002da4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d80:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d90:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d831      	bhi.n	8002e24 <HAL_TIM_ReadCapturedValue+0x78>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e25 	.word	0x08002e25
 8002dd0:	08002e25 	.word	0x08002e25
 8002dd4:	08002e25 	.word	0x08002e25
 8002dd8:	08002e07 	.word	0x08002e07
 8002ddc:	08002e25 	.word	0x08002e25
 8002de0:	08002e25 	.word	0x08002e25
 8002de4:	08002e25 	.word	0x08002e25
 8002de8:	08002e11 	.word	0x08002e11
 8002dec:	08002e25 	.word	0x08002e25
 8002df0:	08002e25 	.word	0x08002e25
 8002df4:	08002e25 	.word	0x08002e25
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e02:	60fb      	str	r3, [r7, #12]

      break;
 8002e04:	e00f      	b.n	8002e26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]

      break;
 8002e0e:	e00a      	b.n	8002e26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	60fb      	str	r3, [r7, #12]

      break;
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	60fb      	str	r3, [r7, #12]

      break;
 8002e22:	e000      	b.n	8002e26 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e24:	bf00      	nop
  }

  return tmpreg;
 8002e26:	68fb      	ldr	r3, [r7, #12]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a48      	ldr	r2, [pc, #288]	; (8002fb8 <TIM_Base_SetConfig+0x134>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d013      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d00f      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a45      	ldr	r2, [pc, #276]	; (8002fbc <TIM_Base_SetConfig+0x138>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a44      	ldr	r2, [pc, #272]	; (8002fc0 <TIM_Base_SetConfig+0x13c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <TIM_Base_SetConfig+0x140>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <TIM_Base_SetConfig+0x144>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a37      	ldr	r2, [pc, #220]	; (8002fb8 <TIM_Base_SetConfig+0x134>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d01f      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d01b      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a34      	ldr	r2, [pc, #208]	; (8002fbc <TIM_Base_SetConfig+0x138>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d017      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a33      	ldr	r2, [pc, #204]	; (8002fc0 <TIM_Base_SetConfig+0x13c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a32      	ldr	r2, [pc, #200]	; (8002fc4 <TIM_Base_SetConfig+0x140>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00f      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a32      	ldr	r2, [pc, #200]	; (8002fcc <TIM_Base_SetConfig+0x148>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <TIM_Base_SetConfig+0x14c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <TIM_Base_SetConfig+0x150>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d003      	beq.n	8002f1e <TIM_Base_SetConfig+0x9a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <TIM_Base_SetConfig+0x144>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <TIM_Base_SetConfig+0x134>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d013      	beq.n	8002f84 <TIM_Base_SetConfig+0x100>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a19      	ldr	r2, [pc, #100]	; (8002fc4 <TIM_Base_SetConfig+0x140>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00f      	beq.n	8002f84 <TIM_Base_SetConfig+0x100>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <TIM_Base_SetConfig+0x148>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <TIM_Base_SetConfig+0x100>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <TIM_Base_SetConfig+0x14c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_Base_SetConfig+0x100>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <TIM_Base_SetConfig+0x150>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0x100>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <TIM_Base_SetConfig+0x144>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f023 0201 	bic.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	611a      	str	r2, [r3, #16]
  }
}
 8002faa:	bf00      	nop
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40013400 	.word	0x40013400
 8002fc8:	40015000 	.word	0x40015000
 8002fcc:	40014000 	.word	0x40014000
 8002fd0:	40014400 	.word	0x40014400
 8002fd4:	40014800 	.word	0x40014800

08002fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f023 0201 	bic.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 0302 	bic.w	r3, r3, #2
 8003024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <TIM_OC1_SetConfig+0x11c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <TIM_OC1_SetConfig+0x88>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a2f      	ldr	r2, [pc, #188]	; (80030f8 <TIM_OC1_SetConfig+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00f      	beq.n	8003060 <TIM_OC1_SetConfig+0x88>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a2e      	ldr	r2, [pc, #184]	; (80030fc <TIM_OC1_SetConfig+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00b      	beq.n	8003060 <TIM_OC1_SetConfig+0x88>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <TIM_OC1_SetConfig+0x128>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <TIM_OC1_SetConfig+0x88>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <TIM_OC1_SetConfig+0x12c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <TIM_OC1_SetConfig+0x88>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <TIM_OC1_SetConfig+0x130>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d10c      	bne.n	800307a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0308 	bic.w	r3, r3, #8
 8003066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1d      	ldr	r2, [pc, #116]	; (80030f4 <TIM_OC1_SetConfig+0x11c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <TIM_OC1_SetConfig+0xd2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <TIM_OC1_SetConfig+0x120>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00f      	beq.n	80030aa <TIM_OC1_SetConfig+0xd2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1b      	ldr	r2, [pc, #108]	; (80030fc <TIM_OC1_SetConfig+0x124>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_OC1_SetConfig+0xd2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a1a      	ldr	r2, [pc, #104]	; (8003100 <TIM_OC1_SetConfig+0x128>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <TIM_OC1_SetConfig+0xd2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <TIM_OC1_SetConfig+0x12c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC1_SetConfig+0xd2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <TIM_OC1_SetConfig+0x130>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d111      	bne.n	80030ce <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	621a      	str	r2, [r3, #32]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40013400 	.word	0x40013400
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400
 8003104:	40014800 	.word	0x40014800
 8003108:	40015000 	.word	0x40015000

0800310c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 0210 	bic.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0320 	bic.w	r3, r3, #32
 800315a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a2c      	ldr	r2, [pc, #176]	; (800321c <TIM_OC2_SetConfig+0x110>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_OC2_SetConfig+0x74>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <TIM_OC2_SetConfig+0x114>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC2_SetConfig+0x74>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <TIM_OC2_SetConfig+0x118>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10d      	bne.n	800319c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1f      	ldr	r2, [pc, #124]	; (800321c <TIM_OC2_SetConfig+0x110>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <TIM_OC2_SetConfig+0xc0>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <TIM_OC2_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00f      	beq.n	80031cc <TIM_OC2_SetConfig+0xc0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <TIM_OC2_SetConfig+0x11c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00b      	beq.n	80031cc <TIM_OC2_SetConfig+0xc0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1d      	ldr	r2, [pc, #116]	; (800322c <TIM_OC2_SetConfig+0x120>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <TIM_OC2_SetConfig+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <TIM_OC2_SetConfig+0x124>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_OC2_SetConfig+0xc0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a17      	ldr	r2, [pc, #92]	; (8003224 <TIM_OC2_SetConfig+0x118>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d113      	bne.n	80031f4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40013400 	.word	0x40013400
 8003224:	40015000 	.word	0x40015000
 8003228:	40014000 	.word	0x40014000
 800322c:	40014400 	.word	0x40014400
 8003230:	40014800 	.word	0x40014800

08003234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	021b      	lsls	r3, r3, #8
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <TIM_OC3_SetConfig+0x10c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_OC3_SetConfig+0x72>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <TIM_OC3_SetConfig+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_OC3_SetConfig+0x72>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <TIM_OC3_SetConfig+0x114>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10d      	bne.n	80032c2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <TIM_OC3_SetConfig+0x10c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <TIM_OC3_SetConfig+0xbe>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <TIM_OC3_SetConfig+0x110>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <TIM_OC3_SetConfig+0xbe>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <TIM_OC3_SetConfig+0x118>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00b      	beq.n	80032f2 <TIM_OC3_SetConfig+0xbe>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <TIM_OC3_SetConfig+0x11c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <TIM_OC3_SetConfig+0xbe>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <TIM_OC3_SetConfig+0x120>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_OC3_SetConfig+0xbe>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a16      	ldr	r2, [pc, #88]	; (8003348 <TIM_OC3_SetConfig+0x114>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d113      	bne.n	800331a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40013400 	.word	0x40013400
 8003348:	40015000 	.word	0x40015000
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800

08003358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800338a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a2c      	ldr	r2, [pc, #176]	; (8003468 <TIM_OC4_SetConfig+0x110>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_OC4_SetConfig+0x74>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a2b      	ldr	r2, [pc, #172]	; (800346c <TIM_OC4_SetConfig+0x114>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_OC4_SetConfig+0x74>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <TIM_OC4_SetConfig+0x118>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d10d      	bne.n	80033e8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	031b      	lsls	r3, r3, #12
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1f      	ldr	r2, [pc, #124]	; (8003468 <TIM_OC4_SetConfig+0x110>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <TIM_OC4_SetConfig+0xc0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a1e      	ldr	r2, [pc, #120]	; (800346c <TIM_OC4_SetConfig+0x114>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00f      	beq.n	8003418 <TIM_OC4_SetConfig+0xc0>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	; (8003474 <TIM_OC4_SetConfig+0x11c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00b      	beq.n	8003418 <TIM_OC4_SetConfig+0xc0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <TIM_OC4_SetConfig+0x120>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d007      	beq.n	8003418 <TIM_OC4_SetConfig+0xc0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1c      	ldr	r2, [pc, #112]	; (800347c <TIM_OC4_SetConfig+0x124>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <TIM_OC4_SetConfig+0xc0>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a17      	ldr	r2, [pc, #92]	; (8003470 <TIM_OC4_SetConfig+0x118>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d113      	bne.n	8003440 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800341e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003426:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	621a      	str	r2, [r3, #32]
}
 800345a:	bf00      	nop
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40013400 	.word	0x40013400
 8003470:	40015000 	.word	0x40015000
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80034c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <TIM_OC5_SetConfig+0xbc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d013      	beq.n	8003502 <TIM_OC5_SetConfig+0x82>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <TIM_OC5_SetConfig+0xc0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00f      	beq.n	8003502 <TIM_OC5_SetConfig+0x82>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <TIM_OC5_SetConfig+0xc4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00b      	beq.n	8003502 <TIM_OC5_SetConfig+0x82>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a16      	ldr	r2, [pc, #88]	; (8003548 <TIM_OC5_SetConfig+0xc8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <TIM_OC5_SetConfig+0x82>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <TIM_OC5_SetConfig+0xcc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC5_SetConfig+0x82>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <TIM_OC5_SetConfig+0xd0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d109      	bne.n	8003516 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40013400 	.word	0x40013400
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800
 8003550:	40015000 	.word	0x40015000

08003554 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	051b      	lsls	r3, r3, #20
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <TIM_OC6_SetConfig+0xc0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <TIM_OC6_SetConfig+0x84>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a19      	ldr	r2, [pc, #100]	; (8003618 <TIM_OC6_SetConfig+0xc4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00f      	beq.n	80035d8 <TIM_OC6_SetConfig+0x84>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a18      	ldr	r2, [pc, #96]	; (800361c <TIM_OC6_SetConfig+0xc8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00b      	beq.n	80035d8 <TIM_OC6_SetConfig+0x84>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a17      	ldr	r2, [pc, #92]	; (8003620 <TIM_OC6_SetConfig+0xcc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_OC6_SetConfig+0x84>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <TIM_OC6_SetConfig+0xd0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_OC6_SetConfig+0x84>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <TIM_OC6_SetConfig+0xd4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d109      	bne.n	80035ec <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	029b      	lsls	r3, r3, #10
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40013400 	.word	0x40013400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800
 8003628:	40015000 	.word	0x40015000

0800362c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365e:	f023 0307 	bic.w	r3, r3, #7
 8003662:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4a4e      	ldr	r2, [pc, #312]	; (80037b4 <TIM_SlaveTimer_SetConfig+0x188>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f000 8092 	beq.w	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 8003682:	4a4c      	ldr	r2, [pc, #304]	; (80037b4 <TIM_SlaveTimer_SetConfig+0x188>)
 8003684:	4293      	cmp	r3, r2
 8003686:	f200 808b 	bhi.w	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 800368a:	4a4b      	ldr	r2, [pc, #300]	; (80037b8 <TIM_SlaveTimer_SetConfig+0x18c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	f000 808a 	beq.w	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 8003692:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <TIM_SlaveTimer_SetConfig+0x18c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f200 8083 	bhi.w	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 800369a:	4a48      	ldr	r2, [pc, #288]	; (80037bc <TIM_SlaveTimer_SetConfig+0x190>)
 800369c:	4293      	cmp	r3, r2
 800369e:	f000 8082 	beq.w	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 80036a2:	4a46      	ldr	r2, [pc, #280]	; (80037bc <TIM_SlaveTimer_SetConfig+0x190>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d87b      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036a8:	4a45      	ldr	r2, [pc, #276]	; (80037c0 <TIM_SlaveTimer_SetConfig+0x194>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d07b      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 80036ae:	4a44      	ldr	r2, [pc, #272]	; (80037c0 <TIM_SlaveTimer_SetConfig+0x194>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d875      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036b4:	4a43      	ldr	r2, [pc, #268]	; (80037c4 <TIM_SlaveTimer_SetConfig+0x198>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d075      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 80036ba:	4a42      	ldr	r2, [pc, #264]	; (80037c4 <TIM_SlaveTimer_SetConfig+0x198>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d86f      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036c4:	d06f      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 80036c6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036ca:	d869      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036cc:	2b70      	cmp	r3, #112	; 0x70
 80036ce:	d01a      	beq.n	8003706 <TIM_SlaveTimer_SetConfig+0xda>
 80036d0:	2b70      	cmp	r3, #112	; 0x70
 80036d2:	d865      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036d4:	2b60      	cmp	r3, #96	; 0x60
 80036d6:	d059      	beq.n	800378c <TIM_SlaveTimer_SetConfig+0x160>
 80036d8:	2b60      	cmp	r3, #96	; 0x60
 80036da:	d861      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036dc:	2b50      	cmp	r3, #80	; 0x50
 80036de:	d04b      	beq.n	8003778 <TIM_SlaveTimer_SetConfig+0x14c>
 80036e0:	2b50      	cmp	r3, #80	; 0x50
 80036e2:	d85d      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d019      	beq.n	800371c <TIM_SlaveTimer_SetConfig+0xf0>
 80036e8:	2b40      	cmp	r3, #64	; 0x40
 80036ea:	d859      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036ec:	2b30      	cmp	r3, #48	; 0x30
 80036ee:	d05a      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d855      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d056      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d851      	bhi.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d052      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 8003700:	2b10      	cmp	r3, #16
 8003702:	d050      	beq.n	80037a6 <TIM_SlaveTimer_SetConfig+0x17a>
 8003704:	e04c      	b.n	80037a0 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f000 f9da 	bl	8003ace <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800371a:	e045      	b.n	80037a8 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d004      	beq.n	800372e <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003728:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800372c:	d101      	bne.n	8003732 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e03b      	b.n	80037aa <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003758:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	4313      	orrs	r3, r2
 8003764:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
      break;
 8003776:	e017      	b.n	80037a8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	461a      	mov	r2, r3
 8003786:	f000 f88d 	bl	80038a4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800378a:	e00d      	b.n	80037a8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	461a      	mov	r2, r3
 800379a:	f000 f8ef 	bl	800397c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800379e:	e003      	b.n	80037a8 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	75fb      	strb	r3, [r7, #23]
      break;
 80037a4:	e000      	b.n	80037a8 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 80037a6:	bf00      	nop
  }

  return status;
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	00100070 	.word	0x00100070
 80037b8:	00100050 	.word	0x00100050
 80037bc:	00100040 	.word	0x00100040
 80037c0:	00100030 	.word	0x00100030
 80037c4:	00100020 	.word	0x00100020

080037c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f023 0201 	bic.w	r2, r3, #1
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a26      	ldr	r2, [pc, #152]	; (800388c <TIM_TI1_SetConfig+0xc4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d017      	beq.n	8003826 <TIM_TI1_SetConfig+0x5e>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d013      	beq.n	8003826 <TIM_TI1_SetConfig+0x5e>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <TIM_TI1_SetConfig+0xc8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00f      	beq.n	8003826 <TIM_TI1_SetConfig+0x5e>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a22      	ldr	r2, [pc, #136]	; (8003894 <TIM_TI1_SetConfig+0xcc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_TI1_SetConfig+0x5e>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a21      	ldr	r2, [pc, #132]	; (8003898 <TIM_TI1_SetConfig+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <TIM_TI1_SetConfig+0x5e>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <TIM_TI1_SetConfig+0xd4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_TI1_SetConfig+0x5e>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a1f      	ldr	r2, [pc, #124]	; (80038a0 <TIM_TI1_SetConfig+0xd8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d101      	bne.n	800382a <TIM_TI1_SetConfig+0x62>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <TIM_TI1_SetConfig+0x64>
 800382a:	2300      	movs	r3, #0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0303 	bic.w	r3, r3, #3
 8003836:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e003      	b.n	800384a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003850:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	b2db      	uxtb	r3, r3
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f003 030a 	and.w	r3, r3, #10
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40013400 	.word	0x40013400
 800389c:	40014000 	.word	0x40014000
 80038a0:	40015000 	.word	0x40015000

080038a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 030a 	bic.w	r3, r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b087      	sub	sp, #28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0210 	bic.w	r2, r3, #16
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	031b      	lsls	r3, r3, #12
 8003946:	b29b      	uxth	r3, r3
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003954:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0210 	bic.w	r2, r3, #16
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	031b      	lsls	r3, r3, #12
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f023 0303 	bic.w	r3, r3, #3
 8003a08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	031b      	lsls	r3, r3, #12
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003aa6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	031b      	lsls	r3, r3, #12
 8003aac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	621a      	str	r2, [r3, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b087      	sub	sp, #28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]
 8003ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b087      	sub	sp, #28
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2201      	movs	r2, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	401a      	ands	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	fa01 f303 	lsl.w	r3, r1, r3
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e06f      	b.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a31      	ldr	r2, [pc, #196]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d009      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d004      	beq.n	8003bae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003bb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1e      	ldr	r2, [pc, #120]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d01d      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d018      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d013      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00e      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d009      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a11      	ldr	r2, [pc, #68]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d10c      	bne.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	40013400 	.word	0x40013400
 8003c64:	40015000 	.word	0x40015000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40014000 	.word	0x40014000

08003c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4d0d      	ldr	r5, [pc, #52]	; (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	; (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4d0b      	ldr	r5, [pc, #44]	; (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	; (8003d44 <__libc_init_array+0x44>)
 8003d14:	f000 f820 	bl	8003d58 <_init>
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003d80 	.word	0x08003d80
 8003d3c:	08003d80 	.word	0x08003d80
 8003d40:	08003d80 	.word	0x08003d80
 8003d44:	08003d84 	.word	0x08003d84

08003d48 <memset>:
 8003d48:	4402      	add	r2, r0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d100      	bne.n	8003d52 <memset+0xa>
 8003d50:	4770      	bx	lr
 8003d52:	f803 1b01 	strb.w	r1, [r3], #1
 8003d56:	e7f9      	b.n	8003d4c <memset+0x4>

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
